#![doc = "Peripheral access API for LPC11UXX microcontrollers (generated using svd2rust v0.28.0 (368c0da 2023-01-30))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.28.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 2;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[allow(unused_imports)]
use generic::*;
#[doc = "Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    #[cfg(feature = "gpio_pin_int")]
    fn PIN_INT0();
    #[cfg(feature = "gpio_pin_int")]
    fn PIN_INT1();
    #[cfg(feature = "gpio_pin_int")]
    fn PIN_INT2();
    #[cfg(feature = "gpio_pin_int")]
    fn PIN_INT3();
    #[cfg(feature = "gpio_pin_int")]
    fn PIN_INT4();
    #[cfg(feature = "gpio_pin_int")]
    fn PIN_INT5();
    #[cfg(feature = "gpio_pin_int")]
    fn PIN_INT6();
    #[cfg(feature = "gpio_pin_int")]
    fn PIN_INT7();
    #[cfg(feature = "gpio_group_int")]
    fn GINT0();
    #[cfg(feature = "gpio_group_int")]
    fn GINT1();
    #[cfg(feature = "ssp")]
    fn SSP1();
    #[cfg(feature = "i2c")]
    fn I2C();
    #[cfg(feature = "ct16")]
    fn CT16B0();
    #[cfg(feature = "ct16")]
    fn CT16B1();
    #[cfg(feature = "ct32")]
    fn CT32B0();
    #[cfg(feature = "ct32")]
    fn CT32B1();
    #[cfg(feature = "ssp")]
    fn SSP0();
    #[cfg(feature = "usart")]
    fn USART();
    #[cfg(feature = "usb")]
    fn USB_IRQ();
    #[cfg(feature = "usb")]
    fn USB_FIQ();
    #[cfg(feature = "adc")]
    fn ADC();
    #[cfg(feature = "wwdt")]
    fn WDT();
    #[cfg(feature = "syscon")]
    fn BOD_IRQ();
    #[cfg(feature = "flashctrl")]
    fn FLASH_IRQ();
    #[cfg(feature = "usb")]
    fn USBWAKEUP();
}
#[doc(hidden)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 31] = [
    #[cfg(not(all(feature = "gpio_pin_int",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "gpio_pin_int")]
    Vector { _handler: PIN_INT0 },
    #[cfg(not(all(feature = "gpio_pin_int",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "gpio_pin_int")]
    Vector { _handler: PIN_INT1 },
    #[cfg(not(all(feature = "gpio_pin_int",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "gpio_pin_int")]
    Vector { _handler: PIN_INT2 },
    #[cfg(not(all(feature = "gpio_pin_int",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "gpio_pin_int")]
    Vector { _handler: PIN_INT3 },
    #[cfg(not(all(feature = "gpio_pin_int",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "gpio_pin_int")]
    Vector { _handler: PIN_INT4 },
    #[cfg(not(all(feature = "gpio_pin_int",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "gpio_pin_int")]
    Vector { _handler: PIN_INT5 },
    #[cfg(not(all(feature = "gpio_pin_int",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "gpio_pin_int")]
    Vector { _handler: PIN_INT6 },
    #[cfg(not(all(feature = "gpio_pin_int",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "gpio_pin_int")]
    Vector { _handler: PIN_INT7 },
    #[cfg(not(all(feature = "gpio_group_int",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "gpio_group_int")]
    Vector { _handler: GINT0 },
    #[cfg(not(all(feature = "gpio_group_int",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "gpio_group_int")]
    Vector { _handler: GINT1 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    #[cfg(not(all(feature = "ssp",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "ssp")]
    Vector { _handler: SSP1 },
    #[cfg(not(all(feature = "i2c",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "i2c")]
    Vector { _handler: I2C },
    #[cfg(not(all(feature = "ct16",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "ct16")]
    Vector { _handler: CT16B0 },
    #[cfg(not(all(feature = "ct16",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "ct16")]
    Vector { _handler: CT16B1 },
    #[cfg(not(all(feature = "ct32",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "ct32")]
    Vector { _handler: CT32B0 },
    #[cfg(not(all(feature = "ct32",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "ct32")]
    Vector { _handler: CT32B1 },
    #[cfg(not(all(feature = "ssp",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "ssp")]
    Vector { _handler: SSP0 },
    #[cfg(not(all(feature = "usart",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "usart")]
    Vector { _handler: USART },
    #[cfg(not(all(feature = "usb",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "usb")]
    Vector { _handler: USB_IRQ },
    #[cfg(not(all(feature = "usb",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "usb")]
    Vector { _handler: USB_FIQ },
    #[cfg(not(all(feature = "adc",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "adc")]
    Vector { _handler: ADC },
    #[cfg(not(all(feature = "wwdt",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "wwdt")]
    Vector { _handler: WDT },
    #[cfg(not(all(feature = "syscon",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "syscon")]
    Vector { _handler: BOD_IRQ },
    #[cfg(not(all(feature = "flashctrl",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "flashctrl")]
    Vector {
        _handler: FLASH_IRQ,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    #[cfg(not(all(feature = "usb",)))]
    Vector { _reserved: 0 },
    #[cfg(feature = "usb")]
    Vector {
        _handler: USBWAKEUP,
    },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - PIN_INT0"]
    #[cfg(feature = "gpio_pin_int")]
    PIN_INT0 = 0,
    #[doc = "1 - PIN_INT1"]
    #[cfg(feature = "gpio_pin_int")]
    PIN_INT1 = 1,
    #[doc = "2 - PIN_INT2"]
    #[cfg(feature = "gpio_pin_int")]
    PIN_INT2 = 2,
    #[doc = "3 - PIN_INT3"]
    #[cfg(feature = "gpio_pin_int")]
    PIN_INT3 = 3,
    #[doc = "4 - PIN_INT4"]
    #[cfg(feature = "gpio_pin_int")]
    PIN_INT4 = 4,
    #[doc = "5 - PIN_INT5"]
    #[cfg(feature = "gpio_pin_int")]
    PIN_INT5 = 5,
    #[doc = "6 - PIN_INT6"]
    #[cfg(feature = "gpio_pin_int")]
    PIN_INT6 = 6,
    #[doc = "7 - PIN_INT7"]
    #[cfg(feature = "gpio_pin_int")]
    PIN_INT7 = 7,
    #[doc = "8 - GINT0"]
    #[cfg(feature = "gpio_group_int")]
    GINT0 = 8,
    #[doc = "9 - GINT1"]
    #[cfg(feature = "gpio_group_int")]
    GINT1 = 9,
    #[doc = "14 - SSP1"]
    #[cfg(feature = "ssp")]
    SSP1 = 14,
    #[doc = "15 - I2C"]
    #[cfg(feature = "i2c")]
    I2C = 15,
    #[doc = "16 - CT16B0"]
    #[cfg(feature = "ct16")]
    CT16B0 = 16,
    #[doc = "17 - CT16B1"]
    #[cfg(feature = "ct16")]
    CT16B1 = 17,
    #[doc = "18 - CT32B0"]
    #[cfg(feature = "ct32")]
    CT32B0 = 18,
    #[doc = "19 - CT32B1"]
    #[cfg(feature = "ct32")]
    CT32B1 = 19,
    #[doc = "20 - SSP0"]
    #[cfg(feature = "ssp")]
    SSP0 = 20,
    #[doc = "21 - USART"]
    #[cfg(feature = "usart")]
    USART = 21,
    #[doc = "22 - USB_IRQ"]
    #[cfg(feature = "usb")]
    USB_IRQ = 22,
    #[doc = "23 - USB_FIQ"]
    #[cfg(feature = "usb")]
    USB_FIQ = 23,
    #[doc = "24 - ADC"]
    #[cfg(feature = "adc")]
    ADC = 24,
    #[doc = "25 - WDT"]
    #[cfg(feature = "wwdt")]
    WDT = 25,
    #[doc = "26 - BOD_IRQ"]
    #[cfg(feature = "syscon")]
    BOD_IRQ = 26,
    #[doc = "27 - FLASH_IRQ"]
    #[cfg(feature = "flashctrl")]
    FLASH_IRQ = 27,
    #[doc = "30 - USBWAKEUP"]
    #[cfg(feature = "usb")]
    USBWAKEUP = 30,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "I2C-bus controller"]
#[cfg(feature = "i2c")]
pub struct I2C {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "i2c")]
unsafe impl Send for I2C {}
#[cfg(feature = "i2c")]
impl I2C {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c::RegisterBlock = 0x4000_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "i2c")]
impl Deref for I2C {
    type Target = i2c::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "i2c")]
impl core::fmt::Debug for I2C {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C").finish()
    }
}
#[doc = "I2C-bus controller"]
#[cfg(feature = "i2c")]
pub mod i2c;
#[doc = "Windowed Watchdog Timer (WWDT)"]
#[cfg(feature = "wwdt")]
pub struct WWDT {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "wwdt")]
unsafe impl Send for WWDT {}
#[cfg(feature = "wwdt")]
impl WWDT {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const wwdt::RegisterBlock = 0x4000_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wwdt::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "wwdt")]
impl Deref for WWDT {
    type Target = wwdt::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "wwdt")]
impl core::fmt::Debug for WWDT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDT").finish()
    }
}
#[doc = "Windowed Watchdog Timer (WWDT)"]
#[cfg(feature = "wwdt")]
pub mod wwdt;
#[doc = "USART"]
#[cfg(feature = "usart")]
pub struct USART {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "usart")]
unsafe impl Send for USART {}
#[cfg(feature = "usart")]
impl USART {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usart::RegisterBlock = 0x4000_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "usart")]
impl Deref for USART {
    type Target = usart::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "usart")]
impl core::fmt::Debug for USART {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART").finish()
    }
}
#[doc = "USART"]
#[cfg(feature = "usart")]
pub mod usart;
#[doc = "16-bit counter/timers CT16B0"]
#[cfg(feature = "ct16")]
pub struct CT16B0 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "ct16")]
unsafe impl Send for CT16B0 {}
#[cfg(feature = "ct16")]
impl CT16B0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ct16b0::RegisterBlock = 0x4000_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ct16b0::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "ct16")]
impl Deref for CT16B0 {
    type Target = ct16b0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "ct16")]
impl core::fmt::Debug for CT16B0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CT16B0").finish()
    }
}
#[doc = "16-bit counter/timers CT16B0"]
#[cfg(feature = "ct16")]
pub mod ct16b0;
#[doc = "16-bit counter/timers CT16B1"]
#[cfg(feature = "ct16")]
pub struct CT16B1 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "ct16")]
unsafe impl Send for CT16B1 {}
#[cfg(feature = "ct16")]
impl CT16B1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ct16b1::RegisterBlock = 0x4001_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ct16b1::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "ct16")]
impl Deref for CT16B1 {
    type Target = ct16b1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "ct16")]
impl core::fmt::Debug for CT16B1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CT16B1").finish()
    }
}
#[doc = "16-bit counter/timers CT16B1"]
#[cfg(feature = "ct16")]
pub mod ct16b1;
#[doc = "32-bit counter/timers CT32B0"]
#[cfg(feature = "ct32")]
pub struct CT32B0 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "ct32")]
unsafe impl Send for CT32B0 {}
#[cfg(feature = "ct32")]
impl CT32B0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ct32b0::RegisterBlock = 0x4001_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ct32b0::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "ct32")]
impl Deref for CT32B0 {
    type Target = ct32b0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "ct32")]
impl core::fmt::Debug for CT32B0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CT32B0").finish()
    }
}
#[doc = "32-bit counter/timers CT32B0"]
#[cfg(feature = "ct32")]
pub mod ct32b0;
#[doc = "32-bit counter/timers CT32B1"]
#[cfg(feature = "ct32")]
pub struct CT32B1 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "ct32")]
unsafe impl Send for CT32B1 {}
#[cfg(feature = "ct32")]
impl CT32B1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ct32b1::RegisterBlock = 0x4001_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ct32b1::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "ct32")]
impl Deref for CT32B1 {
    type Target = ct32b1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "ct32")]
impl core::fmt::Debug for CT32B1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CT32B1").finish()
    }
}
#[doc = "32-bit counter/timers CT32B1"]
#[cfg(feature = "ct32")]
pub mod ct32b1;
#[doc = "ADC"]
#[cfg(feature = "adc")]
pub struct ADC {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "adc")]
unsafe impl Send for ADC {}
#[cfg(feature = "adc")]
impl ADC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc::RegisterBlock = 0x4001_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "adc")]
impl Deref for ADC {
    type Target = adc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "adc")]
impl core::fmt::Debug for ADC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC").finish()
    }
}
#[doc = "ADC"]
#[cfg(feature = "adc")]
pub mod adc;
#[doc = "Power Management Unit (PMU)"]
#[cfg(feature = "pmu")]
pub struct PMU {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "pmu")]
unsafe impl Send for PMU {}
#[cfg(feature = "pmu")]
impl PMU {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pmu::RegisterBlock = 0x4003_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pmu::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "pmu")]
impl Deref for PMU {
    type Target = pmu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "pmu")]
impl core::fmt::Debug for PMU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PMU").finish()
    }
}
#[doc = "Power Management Unit (PMU)"]
#[cfg(feature = "pmu")]
pub mod pmu;
#[doc = "Flash controller"]
#[cfg(feature = "flashctrl")]
pub struct FLASHCTRL {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "flashctrl")]
unsafe impl Send for FLASHCTRL {}
#[cfg(feature = "flashctrl")]
impl FLASHCTRL {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const flashctrl::RegisterBlock = 0x4003_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const flashctrl::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "flashctrl")]
impl Deref for FLASHCTRL {
    type Target = flashctrl::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "flashctrl")]
impl core::fmt::Debug for FLASHCTRL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASHCTRL").finish()
    }
}
#[doc = "Flash controller"]
#[cfg(feature = "flashctrl")]
pub mod flashctrl;
#[doc = "SSP/SPI"]
#[cfg(feature = "ssp")]
pub struct SSP0 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "ssp")]
unsafe impl Send for SSP0 {}
#[cfg(feature = "ssp")]
impl SSP0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ssp0::RegisterBlock = 0x4004_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ssp0::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "ssp")]
impl Deref for SSP0 {
    type Target = ssp0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "ssp")]
impl core::fmt::Debug for SSP0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SSP0").finish()
    }
}
#[doc = "SSP/SPI"]
#[cfg(feature = "ssp")]
pub mod ssp0;
#[doc = "I/O configuration Modification"]
#[cfg(feature = "iocon")]
pub struct IOCON {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "iocon")]
unsafe impl Send for IOCON {}
#[cfg(feature = "iocon")]
impl IOCON {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const iocon::RegisterBlock = 0x4004_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const iocon::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "iocon")]
impl Deref for IOCON {
    type Target = iocon::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "iocon")]
impl core::fmt::Debug for IOCON {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IOCON").finish()
    }
}
#[doc = "I/O configuration Modification"]
#[cfg(feature = "iocon")]
pub mod iocon;
#[doc = "System control block"]
#[cfg(feature = "syscon")]
pub struct SYSCON {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "syscon")]
unsafe impl Send for SYSCON {}
#[cfg(feature = "syscon")]
impl SYSCON {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const syscon::RegisterBlock = 0x4004_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const syscon::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "syscon")]
impl Deref for SYSCON {
    type Target = syscon::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "syscon")]
impl core::fmt::Debug for SYSCON {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCON").finish()
    }
}
#[doc = "System control block"]
#[cfg(feature = "syscon")]
pub mod syscon;
#[doc = "GPIO pin interrupt"]
#[cfg(feature = "gpio_pin_int")]
pub struct GPIO_PIN_INT {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "gpio_pin_int")]
unsafe impl Send for GPIO_PIN_INT {}
#[cfg(feature = "gpio_pin_int")]
impl GPIO_PIN_INT {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpio_pin_int::RegisterBlock = 0x4004_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio_pin_int::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "gpio_pin_int")]
impl Deref for GPIO_PIN_INT {
    type Target = gpio_pin_int::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "gpio_pin_int")]
impl core::fmt::Debug for GPIO_PIN_INT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO_PIN_INT").finish()
    }
}
#[doc = "GPIO pin interrupt"]
#[cfg(feature = "gpio_pin_int")]
pub mod gpio_pin_int;
#[doc = "SSP/SPI"]
#[cfg(feature = "ssp")]
pub struct SSP1 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "ssp")]
unsafe impl Send for SSP1 {}
#[cfg(feature = "ssp")]
impl SSP1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ssp0::RegisterBlock = 0x4005_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ssp0::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "ssp")]
impl Deref for SSP1 {
    type Target = ssp0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "ssp")]
impl core::fmt::Debug for SSP1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SSP1").finish()
    }
}
#[doc = "SSP/SPI"]
#[cfg(feature = "ssp")]
pub use self::ssp0 as ssp1;
#[doc = "GPIO group interrupt"]
#[cfg(feature = "gpio_group_int")]
pub struct GPIO_GROUP_INT0 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "gpio_group_int")]
unsafe impl Send for GPIO_GROUP_INT0 {}
#[cfg(feature = "gpio_group_int")]
impl GPIO_GROUP_INT0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpio_group_int0::RegisterBlock = 0x4005_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio_group_int0::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "gpio_group_int")]
impl Deref for GPIO_GROUP_INT0 {
    type Target = gpio_group_int0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "gpio_group_int")]
impl core::fmt::Debug for GPIO_GROUP_INT0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO_GROUP_INT0").finish()
    }
}
#[doc = "GPIO group interrupt"]
#[cfg(feature = "gpio_group_int")]
pub mod gpio_group_int0;
#[doc = "GPIO group interrupt"]
#[cfg(feature = "gpio_group_int")]
pub struct GPIO_GROUP_INT1 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "gpio_group_int")]
unsafe impl Send for GPIO_GROUP_INT1 {}
#[cfg(feature = "gpio_group_int")]
impl GPIO_GROUP_INT1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpio_group_int0::RegisterBlock = 0x4006_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio_group_int0::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "gpio_group_int")]
impl Deref for GPIO_GROUP_INT1 {
    type Target = gpio_group_int0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "gpio_group_int")]
impl core::fmt::Debug for GPIO_GROUP_INT1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO_GROUP_INT1").finish()
    }
}
#[doc = "GPIO group interrupt"]
#[cfg(feature = "gpio_group_int")]
pub use self::gpio_group_int0 as gpio_group_int1;
#[doc = "USB2.0 device controller"]
#[cfg(feature = "usb")]
pub struct USB {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "usb")]
unsafe impl Send for USB {}
#[cfg(feature = "usb")]
impl USB {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usb::RegisterBlock = 0x4008_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usb::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "usb")]
impl Deref for USB {
    type Target = usb::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "usb")]
impl core::fmt::Debug for USB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB").finish()
    }
}
#[doc = "USB2.0 device controller"]
#[cfg(feature = "usb")]
pub mod usb;
#[doc = "GPIO port"]
#[cfg(feature = "gpio_port")]
pub struct GPIO_PORT {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "gpio_port")]
unsafe impl Send for GPIO_PORT {}
#[cfg(feature = "gpio_port")]
impl GPIO_PORT {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpio_port::RegisterBlock = 0x5000_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio_port::RegisterBlock {
        Self::PTR
    }
}
#[cfg(feature = "gpio_port")]
impl Deref for GPIO_PORT {
    type Target = gpio_port::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
#[cfg(feature = "gpio_port")]
impl core::fmt::Debug for GPIO_PORT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO_PORT").finish()
    }
}
#[doc = "GPIO port"]
#[cfg(feature = "gpio_port")]
pub mod gpio_port;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "I2C"]
    #[cfg(feature = "i2c")]
    pub I2C: I2C,
    #[doc = "WWDT"]
    #[cfg(feature = "wwdt")]
    pub WWDT: WWDT,
    #[doc = "USART"]
    #[cfg(feature = "usart")]
    pub USART: USART,
    #[doc = "CT16B0"]
    #[cfg(feature = "ct16")]
    pub CT16B0: CT16B0,
    #[doc = "CT16B1"]
    #[cfg(feature = "ct16")]
    pub CT16B1: CT16B1,
    #[doc = "CT32B0"]
    #[cfg(feature = "ct32")]
    pub CT32B0: CT32B0,
    #[doc = "CT32B1"]
    #[cfg(feature = "ct32")]
    pub CT32B1: CT32B1,
    #[doc = "ADC"]
    #[cfg(feature = "adc")]
    pub ADC: ADC,
    #[doc = "PMU"]
    #[cfg(feature = "pmu")]
    pub PMU: PMU,
    #[doc = "FLASHCTRL"]
    #[cfg(feature = "flashctrl")]
    pub FLASHCTRL: FLASHCTRL,
    #[doc = "SSP0"]
    #[cfg(feature = "ssp")]
    pub SSP0: SSP0,
    #[doc = "IOCON"]
    #[cfg(feature = "iocon")]
    pub IOCON: IOCON,
    #[doc = "SYSCON"]
    #[cfg(feature = "syscon")]
    pub SYSCON: SYSCON,
    #[doc = "GPIO_PIN_INT"]
    #[cfg(feature = "gpio_pin_int")]
    pub GPIO_PIN_INT: GPIO_PIN_INT,
    #[doc = "SSP1"]
    #[cfg(feature = "ssp")]
    pub SSP1: SSP1,
    #[doc = "GPIO_GROUP_INT0"]
    #[cfg(feature = "gpio_group_int")]
    pub GPIO_GROUP_INT0: GPIO_GROUP_INT0,
    #[doc = "GPIO_GROUP_INT1"]
    #[cfg(feature = "gpio_group_int")]
    pub GPIO_GROUP_INT1: GPIO_GROUP_INT1,
    #[doc = "USB"]
    #[cfg(feature = "usb")]
    pub USB: USB,
    #[doc = "GPIO_PORT"]
    #[cfg(feature = "gpio_port")]
    pub GPIO_PORT: GPIO_PORT,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            #[cfg(feature = "i2c")]
            I2C: I2C {
                _marker: PhantomData,
            },
            #[cfg(feature = "wwdt")]
            WWDT: WWDT {
                _marker: PhantomData,
            },
            #[cfg(feature = "usart")]
            USART: USART {
                _marker: PhantomData,
            },
            #[cfg(feature = "ct16")]
            CT16B0: CT16B0 {
                _marker: PhantomData,
            },
            #[cfg(feature = "ct16")]
            CT16B1: CT16B1 {
                _marker: PhantomData,
            },
            #[cfg(feature = "ct32")]
            CT32B0: CT32B0 {
                _marker: PhantomData,
            },
            #[cfg(feature = "ct32")]
            CT32B1: CT32B1 {
                _marker: PhantomData,
            },
            #[cfg(feature = "adc")]
            ADC: ADC {
                _marker: PhantomData,
            },
            #[cfg(feature = "pmu")]
            PMU: PMU {
                _marker: PhantomData,
            },
            #[cfg(feature = "flashctrl")]
            FLASHCTRL: FLASHCTRL {
                _marker: PhantomData,
            },
            #[cfg(feature = "ssp")]
            SSP0: SSP0 {
                _marker: PhantomData,
            },
            #[cfg(feature = "iocon")]
            IOCON: IOCON {
                _marker: PhantomData,
            },
            #[cfg(feature = "syscon")]
            SYSCON: SYSCON {
                _marker: PhantomData,
            },
            #[cfg(feature = "gpio_pin_int")]
            GPIO_PIN_INT: GPIO_PIN_INT {
                _marker: PhantomData,
            },
            #[cfg(feature = "ssp")]
            SSP1: SSP1 {
                _marker: PhantomData,
            },
            #[cfg(feature = "gpio_group_int")]
            GPIO_GROUP_INT0: GPIO_GROUP_INT0 {
                _marker: PhantomData,
            },
            #[cfg(feature = "gpio_group_int")]
            GPIO_GROUP_INT1: GPIO_GROUP_INT1 {
                _marker: PhantomData,
            },
            #[cfg(feature = "usb")]
            USB: USB {
                _marker: PhantomData,
            },
            #[cfg(feature = "gpio_port")]
            GPIO_PORT: GPIO_PORT {
                _marker: PhantomData,
            },
        }
    }
}
